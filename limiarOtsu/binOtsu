#!/usr/bin/env python3
# coding: utf-8
# funcionando

import cv2
import numpy as np


caractere = cv2.QT_FONT_NORMAL

imgOriginal = cv2.imread("testeCirculos.jpg")
imgCinza = cv2.imread("testeCirculos.jpg", 0) # o 0 transforma a imagem original em escala de cinza

tipo = cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU
limiar, imgBinarizada = cv2.threshold(imgCinza, 255, 255, tipo)

contornos, _ = cv2.findContours(imgBinarizada, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

for cnt in contornos:
    aproxim = cv2. approxPolyDP(cnt, 0.01*cv2.arcLength(cnt, True), True)
    cv2.drawContours(imgOriginal, [aproxim], 0, (102, 102, 102), 2)

    #metodo ravel: transforma a imagem em um vetor
    x = aproxim.ravel()[0]
    y = aproxim.ravel()[1]

    #detecta qual tipo de forma geométrica é:
    if len(aproxim) == 3:
        cv2.putText(imgOriginal, "Triangulo", (x, y), caractere, 2, (102, 102, 102), 1, cv2.LINE_AA)
        #cv2.putText(imgOriginal, "Triangulo", (x, y), charactere, 2, (255)) =>  (25, 65) => posição coordenadas x,y

    elif len(aproxim) == 4:
        x, y, w, h = cv2.boundingRect(aproxim)
        proporcaoPerim = float(w) / h
        # verifica se é quadrado ou retângulo
        if proporcaoPerim >= 0.95 and proporcaoPerim <= 1.05:
            cv2.putText(imgOriginal, "Quadrado", (x, y), caractere, .85, (102, 102, 102), 1, cv2.LINE_AA)
        else:
            cv2.putText(imgOriginal, "Obj. retangular", (x, y), caractere, .85, (102, 102, 102), 1, cv2.LINE_AA)

    elif len(aproxim) == 5:
        cv2.putText(imgOriginal, "Pentagono", (x, y), caractere, .85, (102, 102, 102), 1, cv2.LINE_AA)

    else:
        cv2.putText(imgOriginal, "Obj. Circular", (x, y), caractere, .85, (102, 102, 102), 1, cv2.LINE_AA)

cv2.imshow("Formas Detectadas", imgOriginal)
cv2.imshow("Imagem Binarizada", imgBinarizada)

cv2.waitKey(0)
cv2.destroyAllWindows()

